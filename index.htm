<!DOCTYPE html>
<html lang="en">
<head>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-QPTP4QSV32"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-QPTP4QSV32');
</script>
<title>Polygon Test & NAS6LIB　Help Document</title>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Script-Type" content="text/javascript">

<script language="JavaScript" type="text/javascript" src="./javascripts/x3dom/jquery-2.1.4.min.js" ></script>
<link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'>
<script language="JavaScript" type='text/javascript' src='./javascripts/x3dom/x3dom.js'> </script>
<link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'>


<script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/timer.js"></script>
<script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/vector.js"></script>
<script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/matrix.js"></script>
<script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/quaternion.js"></script>
<script language="JavaScript" type="text/javascript" src="./javascripts_english/nas6/help.js"></script>
<script language="JavaScript" type="text/javascript" src="./javascripts/nas6/testpoly.js"></script>


<style>
article, aside, dialog, figure, footer, header,
hgroup, menu, nav, section { display: block; }
#x3dabs{
    position: absolute;
    float: left;
    top: 60px;
    left: 20px;
    background:#8080b0;
    border: 2px #000000 solid;
}
</style>
</head>
<body text="black" link="#3333cc" vlink="#663399" alink="#cc0000" bgcolor="#faebf1" background="./img/kumausagineko.jpg">
<b>
<h1>Polygon Test & NAS6LIB　Help document</h1>

<div style = 'width:500px; height:250px; border: 0px; overflow:hidden;'>

<x3d id='x3dabs' width='500px' height='250px'>
    <scene>
        <Viewpoint id='viewp001' position='0 3 20' orientation='0 1 0 0' description='camera'></Viewpoint>
<!--
        <Viewpoint id='viewp001' position='0 0 200' orientation='0 1 0 0' description='camera'></Viewpoint>
        <navigationInfo type='"none"' id="navType"></navigationInfo>
//-->


	<directionalLight id="directional" direction='1 -1 1' on ="TRUE" intensity='1.0' shadowIntensity='0.0'></directionalLight> 
	
        <Transform center='0 0 0' translation='0 0 8' id='box0' DEF='box0'>
            <Transform rotation='0 1 0 0' id='box1' DEF='box1'>

<!--
                <shape>
                    <appearance>
                        <ImageTexture  url="./img/koala.jpg"></ImageTexture>
                        <material diffuseColor='0.8 0.8 0.8'></material>
                    </appearance>
                    <Box size = '5 5 5'></Box>
                </shape>
//-->

                <Shape DEF='Front'>
                    <IndexedFaceSet coordIndex='0 4 5 1' texCoordIndex='0 1 2 3'>
                        <Coordinate DEF='Points' point='2.5 2.5 2.5 2.5 -2.5 2.5 2.5 -2.5 -2.5 2.5 2.5 -2.5 -2.5 2.5 2.5 -2.5 -2.5 2.5 -2.5 -2.5 -2.5 -2.5 2.5 -2.5'></Coordinate>
                        <TextureCoordinate DEF='DefaultTextureCoordinate' point='0 0 1 0 1 1 0 1'></TextureCoordinate>
                    </IndexedFaceSet>
                    <Appearance>
                        <ImageTexture  url="./img/koalaF.jpg"></ImageTexture>
                        <TextureTransform DEF='Rotate180' rotation='3.14'></TextureTransform>
                        <material diffuseColor='0.8 0.8 0.8'></material>
                    </Appearance>
                </Shape>
                <Shape DEF='Back'>
                    <IndexedFaceSet coordIndex='3 2 6 7' texCoordIndex='0 1 2 3'>
                        <Coordinate USE='Points'></Coordinate>
                        <TextureCoordinate USE='DefaultTextureCoordinate'></TextureCoordinate>
                    </IndexedFaceSet>
                    <Appearance>
                        <ImageTexture  url="./img/koala.jpg"></ImageTexture>
                        <TextureTransform DEF='RotateRight' rotation='-1.57'></TextureTransform>
                        <material diffuseColor='0.8 0.8 0.8'></material>
                    </Appearance>
                </Shape>
                <Shape DEF='Left'>
                    <IndexedFaceSet coordIndex='7 6 5 4' texCoordIndex='0 1 2 3'>
                        <Coordinate USE='Points'></Coordinate>
                        <TextureCoordinate USE='DefaultTextureCoordinate'></TextureCoordinate>
                    </IndexedFaceSet>
                    <Appearance>
                        <ImageTexture  url="./img/koala.jpg"></ImageTexture>
                        <TextureTransform USE='RotateRight'></TextureTransform>
                        <material diffuseColor='0.8 0.8 0.8'></material>
                    </Appearance>
                </Shape>
                <Shape DEF='Right'>
                    <IndexedFaceSet coordIndex='0 1 2 3' texCoordIndex='0 1 2 3'>
                        <Coordinate USE='Points'></Coordinate>
                        <TextureCoordinate USE='DefaultTextureCoordinate'></TextureCoordinate>
                    </IndexedFaceSet>
                    <Appearance>
                        <ImageTexture  url="./img/koala.jpg"></ImageTexture>
                        <TextureTransform USE='RotateRight'></TextureTransform>
                        <material diffuseColor='0.8 0.8 0.8'></material>
                    </Appearance>
                </Shape>
                <Shape DEF='Top'>
                    <IndexedFaceSet coordIndex='0 3 7 4' texCoordIndex='0 1 2 3'>
                        <Coordinate USE='Points'></Coordinate>
                        <TextureCoordinate USE='DefaultTextureCoordinate'></TextureCoordinate>
                    </IndexedFaceSet>
                    <Appearance>
                        <ImageTexture  url="./img/koala.jpg"></ImageTexture>
                        <TextureTransform DEF='RotateLeft' rotation='1.57'></TextureTransform>
                        <material diffuseColor='0.8 0.8 0.8'></material>
                    </Appearance>
                </Shape>
                <Shape DEF='Bottom'>
                    <IndexedFaceSet coordIndex='1 5 6 2' texCoordIndex='0 1 2 3'>
                        <Coordinate USE='Points'></Coordinate>
                        <TextureCoordinate USE='DefaultTextureCoordinate'></TextureCoordinate>
                    </IndexedFaceSet>
                    <Appearance>
                        <ImageTexture  url="./img/koala.jpg"></ImageTexture>
                        <TextureTransform USE='Rotate180'></TextureTransform>
                        <material diffuseColor='0.8 0.8 0.8'></material>
                    </Appearance>
                </Shape>

            </Transform>
        </Transform>
    </scene>
</x3d>

</div>

<font size="3">
<br>
<br>
</b>
<hr>
<b>
<br>
<br>
<p id='debug'>　</p>
<br>
<br>
</b>
<hr>
<b>
<br>
<br>
//################################################################<br>
//Programed by NAS6<br>
//################################################################<br>
//./javascripts/nas6lib/timer.js<br>
//./javascripts/nas6lib/vector.js<br>
//./javascripts/nas6lib/matrix.js<br>
//./javascripts/nas6lib/quaternion.js<br>
//./javascripts/nas6lib/keyboard.js<br>
//################################################################<br>
//timer,vector,matrix,quaternion,logarithm quaternion,2/3D CG matrix calculation javascript library<br>
//################################################################<br>
<br>
<br>
</b>
<hr>
<b>
<br>
<br>
<a href="http://nas6.net/htm000.htm">back</a><br>
</b>
<br>
<br>
<hr>
<b>
<br>
<br>
<h1>How to write NAS6LIB template with X3DOM</h1>
This explains how homogeneous coordinates are defined in the order w, x, y, z, ... The order is different, but the functionality is the same...
<br><a href="http://nas6.net/testpoly.htm">testpoly.htm</a><br>
<br>
<a href="http://nas6.net/testpoly.zip">testpoly.zip</a><br>
<br>
<p>・./testpoly.htm</p>
<div style="background:#4080b0;">
<pre>

＜!DOCTYPE html＞
＜html lang="ja"＞
＜head＞
＜title＞Polygon Test & NAS6LIB Help Document＜/title＞
＜meta http-equiv="X-UA-Compatible" content="IE=edge"＞
＜meta http-equiv="Content-Type" content="text/html; charset=UTF-8"＞
＜meta http-equiv="Content-Style-Type" content="text/css"＞
＜meta http-equiv="Content-Script-Type" content="text/javascript"＞

＜script language="JavaScript" type="text/javascript" src="./javascripts/x3dom/jquery-2.1.4.min.js" ＞＜/script＞
＜link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'＞
＜script language="JavaScript" type='text/javascript' src='./javascripts/x3dom/x3dom.js'＞ ＜/script＞
＜link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'＞


＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/timer.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/vector.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/matrix.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/quaternion.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6/help.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6/testpoly.js"＞＜/script＞

＜style＞
article, aside, dialog, figure, footer, header,
hgroup, menu, nav, section { display: block; }
#x3dabs{
    position: absolute;
    float: left;
    top: 76px;
    left: 20px;
    background:#8080b0;
    border: 2px #000000 solid;
}
＜/style＞
＜/head＞
＜body text="black" link="#3333cc" vlink="#663399" alink="#cc0000" bgcolor="#faebf1" background="./img/kumausagineko.jpg"＞
＜b＞
＜h1＞Polygon Test & NAS6LIB Help Document＜/h1＞

＜div style = 'width:500px; height:250px; border: 0px; overflow:hidden;'＞

＜x3d id='x3dabs' width='500px' height='250px'＞
    ＜scene＞
        ＜Viewpoint id='viewp001' position='0 3 20' orientation='0 1 0 0' description='camera'＞＜/Viewpoint＞

	＜directionalLight id="directional" direction='1 -1 1' on ="TRUE" intensity='1.0' shadowIntensity='0.0'＞＜/directionalLight＞ 
	
        ＜Transform center='0 0 0' translation='0 0 8' id='box0' DEF='box0'＞
            ＜Transform rotation='0 1 0 0' id='box1' DEF='box1'＞
            ＜shape＞
                ＜appearance＞
                    ＜ImageTexture  url="./img/koala.jpg"＞＜/ImageTexture＞
                    ＜material diffuseColor='0.8 0.8 0.8'＞＜/material＞
                ＜/appearance＞
                ＜Box size = '5 5 5'＞＜/Box＞
            ＜/shape＞
            ＜/Transform＞
        ＜/Transform＞
    ＜/scene＞
＜/x3d＞
＜/div＞

//　………　Omitted　…………
＜/b＞
＜/font＞
＜/body＞
＜/html＞

</pre>
</div>
<br>
<br>
<p>・./javascripts/nas6/testpoly.js</p>
<div style="background:#4080b0;">
<pre>

var TMan = new N6LTimerMan();  //timer manager
jQuery(document).ready(function(){
  TMan.add();
  TMan.timer[0].setalerm(function() { GLoop(0); }, 50);  //set main loop
});

var bx = new N6LVector(new Array('1','0','0','8'), true);  //pos Box
var bm = new N6LMatrix(4).UnitMat();  //mat Box

//main loop
function GLoop(id){

//　………　Omitted　…………
	
  var MatWK = new N6LMatrix(4).UnitMat();
  var v = new N6LVector(4, false);
  //unit vector//単位ベクトル
  var ax = new N6LVector(4, true).UnitVec(1);
  var ay = new N6LVector(4, true).UnitVec(2);
  var az = new N6LVector(4, true).UnitVec(3);

  //rot mov obj
  MatWK = MatWK.RotAxis(ay, 1.0 * Math.PI / 180.0);  //around y axis rotate 1 degree
  bx = MatWK.Mul(bx);  //pos Box multiply matrix

  //unit vector
  ax = ax.UnitVec(1);
  ay = ay.UnitVec(2);
  az = az.UnitVec(3);
  //rot obj
  MatWK = new N6LMatrix(bm);  //mat Box
  MatWK = MatWK.RotAxis(az, 3.0 * Math.PI / 180.0);  //around z axis rotate 3 degree
  MatWK = MatWK.RotAxis(ay, 2.0 * Math.PI / 180.0);  //around y axis rotate 2 degree
  bm = MatWK.RotAxis(ax, 1.0 * Math.PI / 180.0);     //around x axis rotate 1 degree

  v = bm.Vector();  //rot vector

  var angle = bm.EulerAngle(3, 2, 1);  //rotate order ZYX

// ↑ First half: ↓ Second half
	
  //apply x3dom
  var pos = bx.ToX3DOM(true);
  var elm = document.getElementById('box0');
  elm.setAttribute('translation', pos.toString());
  var rot = v.ToX3DOM();
  elm = document.getElementById('box1');
  elm.setAttribute('rotation', rot.toString());

  //for debug
  elm = document.getElementById('debug');
  elm.innerText = 
  'EulerAngle(rotate per degree z(3)_y(2)_x(1))\n' + angle.x[0] + ' ' + Math.floor(angle.x[1] * 180.0 / Math.PI) + ' ' + Math.floor(angle.x[2] * 180.0 / Math.PI) + ' ' + Math.floor(angle.x[3] * 180.0 / Math.PI); 

  TMan.timer[id].setalerm(function() { GLoop(id); }, 50);  //reset main loop
}

// ... the rest is omitted ...

</pre>
</div>
<br>
<br>
<p>・How to write a header</p>
<div style="background:#4080b0;">
<pre>

＜head＞
＜title＞Please enter a title＜/title＞
＜meta http-equiv="X-UA-Compatible" content="IE=edge"＞
＜meta http-equiv="Content-Type" content="text/html; charset=UTF-8"＞
＜meta http-equiv="Content-Style-Type" content="text/css"＞
＜meta http-equiv="Content-Script-Type" content="text/javascript"＞

＜script language="JavaScript" type="text/javascript" src="./javascripts/x3dom/jquery-2.1.4.min.js" ＞＜/script＞
＜link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'＞
＜script language="JavaScript" type='text/javascript' src='./javascripts/x3dom/x3dom.js'＞ ＜/script＞
＜link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'＞


＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/timer.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/vector.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/matrix.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/quaternion.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6/testpoly.js"＞＜/script＞

＜style＞
article, aside, dialog, figure, footer, header,
hgroup, menu, nav, section { display: block; }
#x3dabs{
    position: absolute;
    float: left;
    top: 76px;
    left: 20px;
    background:#8080b0;
    border: 2px #000000 solid;
}
＜/style＞
＜/head＞

</pre>
</div>
<br>
<br>
This is almost copy and paste<br>
<br>
<div style="background:#4080b0;">
<pre>

＜head＞
＜title＞Please enter a title＜/title＞
＜meta http-equiv="X-UA-Compatible" content="IE=edge"＞
＜meta http-equiv="Content-Type" content="text/html; charset=UTF-8"＞
＜meta http-equiv="Content-Style-Type" content="text/css"＞
＜meta http-equiv="Content-Script-Type" content="text/javascript"＞

＜script language="JavaScript" type="text/javascript" src="./javascripts/x3dom/jquery-2.1.4.min.js" ＞＜/script＞
＜link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'＞
＜script language="JavaScript" type='text/javascript' src='./javascripts/x3dom/x3dom.js'＞ ＜/script＞
＜link rel='stylesheet' type='text/css' href='./javascripts/x3dom/x3dom.css'＞

</pre>
</div>
<br>
It's almost a formula.<br>
<br>
<div style="background:#4080b0;">
<pre>

＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/timer.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/vector.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/matrix.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6lib/quaternion.js"＞＜/script＞
＜script language="JavaScript" type="text/javascript" src="./javascripts/nas6/testpoly.js"＞＜/script＞

</pre>
</div>
<br>
Here you can register the necessary components such as the NAS6 library.<br>
<br>
<div style="background:#4080b0;">
<pre>

＜style＞
article, aside, dialog, figure, footer, header,
hgroup, menu, nav, section { display: block; }
#x3dabs{
    position: absolute;
    float: left;
    top: 76px;
    left: 20px;
    background:#8080b0;
    border: 2px #000000 solid;
}
＜/style＞
＜/head＞

</pre>
</div>
<br>
X3DOM window style sheet<br>
<br>
<br>
<p>・How to write objects</p>
<div style="background:#4080b0;">
<pre>

＜div style = 'width:500px; height:250px; border: 0px; overflow:hidden;'＞

＜x3d id='x3dabs' width='500px' height='250px'＞
    ＜scene＞
        ＜Viewpoint id='viewp001' position='0 3 20' orientation='0 1 0 0' description='camera'＞＜/Viewpoint＞

	＜directionalLight id="directional" direction='1 -1 1' on ="TRUE" intensity='1.0' shadowIntensity='0.0'＞＜/directionalLight＞ 
	
        ＜Transform center='0 0 0' translation='0 0 8' id='box0' DEF='box0'＞
            ＜Transform rotation='0 1 0 0' id='box1' DEF='box1'＞
            ＜shape＞
                ＜appearance＞
                    ＜ImageTexture  url="./img/koala.jpg"＞＜/ImageTexture＞
                    ＜material diffuseColor='0.8 0.8 0.8'＞＜/material＞
                ＜/appearance＞
                ＜Box size = '5 5 5'＞＜/Box＞
            ＜/shape＞
            ＜/Transform＞
        ＜/Transform＞
    ＜/scene＞
＜/x3d＞
＜/div＞

</pre>
</div>
<br>
<br>
The reason why ＜x3d＞ is enclosed in ＜div＞ is to match the layout.<br>
<br>
Since orientation and rotation are rotation vectors, use N6LMatrix to perform matrix calculations.<br>
Convert this to a rotation vector using N6LMatrix.Vector(); and then insert it.<br>
<br>
There are various objects such as Box and Sphere.<br>
For more information, see the original x3dom website.<br>
<br>
The reason why ＜shape＞ is enclosed twice in ＜transform＞ is<br>
to translate the outer ＜transform＞ and rotate it in place using the inner ＜transform＞.<br>
The part enclosed in ＜transform＞ is the description part of the object.<br>
If you want to change the size of the box, change Box.size.<br>
If you want to change the texture, change ImageTexture.url.<br>
<br>
<br>
<br>
<p>・Register the main loop</p>
<div style="background:#4080b0;">
<pre>

var TMan = new N6LTimerMan();  //timer manager
jQuery(document).ready(function(){
  TMan.add();
  TMan.timer[0].setalerm(function() { GLoop(0); }, 50);  //set main loop
});

</pre>
</div>
<br>
<br>
In the global scope<br>
var TMan = new N6LTimerMan(); // Timer manager<br>
Construct the timer manager<br>
<br>
When the page is reloaded, tweak<br>
jQuery(document).ready(function(){});<br>
To register the main loop when the page is reloaded, use<br>
<br>
<br>
To construct the id 0 timer TMan.timer[0] in the timer manager, use TMan.add();<br>
<br>
TMan.timer[0].setalerm(function() { GLoop(0); }, 50); // Set the main loop<br>
<br>
Register the main loop with setalerm(); in function() { GLoop(0); }<br>
50 means that the main loop will be called after 50 milliseconds<br>
<br>
<br>
<p>・Implement the main loop</p>
<div style="background:#4080b0;">
<pre>

var bx = new N6LVector(new Array('1','0','0','8'), true);  //pos Box
var bm = new N6LMatrix(4).UnitMat();  //mat Box

//main loop
function GLoop(id){

//　………　Omitted　…………

  var MatWK = new N6LMatrix(4).UnitMat();
  var v = new N6LVector(4, false);
  //unit vector
  var ax = new N6LVector(4, true).UnitVec(1);
  var ay = new N6LVector(4, true).UnitVec(2);
  var az = new N6LVector(4, true).UnitVec(3);

  //rot mov obj
  MatWK = MatWK.RotAxis(ay, 1.0 * Math.PI / 180.0);  //around y axis rotate 1 degree
  bx = MatWK.Mul(bx);  //pos Box multiply matrix

  //unit vector
  ax = ax.UnitVec(1);
  ay = ay.UnitVec(2);
  az = az.UnitVec(3);
  //rot obj
  MatWK = new N6LMatrix(bm);  //mat Box
  MatWK = MatWK.RotAxis(az, 3.0 * Math.PI / 180.0);  //around z axis rotate 3 degree
  MatWK = MatWK.RotAxis(ay, 2.0 * Math.PI / 180.0);  //around y axis rotate 2 degree
  bm = MatWK.RotAxis(ax, 1.0 * Math.PI / 180.0);     //around x axis rotate 1 degree

  v = bm.Vector();  //rot vector

  var angle = bm.EulerAngle(3, 2, 1);  //rotate order ZYX

// ↑ First half: ↓ Second half

  //apply x3dom
  var pos = bx.ToX3DOM(true);
  var elm = document.getElementById('box0');
  elm.setAttribute('translation', pos.toString());
  var rot = v.ToX3DOM();
  elm = document.getElementById('box1');
  elm.setAttribute('rotation', rot.toString());

  //for debug
  elm = document.getElementById('debug');
  elm.innerText = 
  'EulerAngle(rotate per degree z(3)_y(2)_x(1))\n' + angle.x[0] + ' ' + Math.floor(angle.x[1] * 180.0 / Math.PI) + ' ' + Math.floor(angle.x[2] * 180.0 / Math.PI) + ' ' + Math.floor(angle.x[3] * 180.0 / Math.PI); 

  TMan.timer[id].setalerm(function() { GLoop(id); }, 50);  //reset main loop
}

</pre>
</div>
<br>
<br>
In the first half, use NAS6LIB to calculate the rotation matrix.<br>
Since orientation and rotation are rotation vectors, use N6LMatrix to calculate the matrix.<br>
Convert to a rotation vector using N6LMatrix.Vector() and then enter the result.<br>
<br>
In the second half, apply the value to x3dom.<br>
Note that in homogeneous coordinates, NAS6LIB uses the order w, x, y, z..., while x3dom uses the order x, y, z, w....<br>
Convert to SFVecXf using N6LVector.ToX3DOM(b). Setting b=true changes the degree of Vector from 4 to 3. <br>
Convert from sf=SFVecXf using N6LVector.FromX3DOM(sf). <br>
Convert to SFMatrix4f using N6LMatrix.ToX3DOM(). <br>
Convert from sf=SFMatrix4f using N6LMatrix.FromX3DOM(sf). <br>
<br>
Get the element with document.getElementById();<br>
Apply the value to x3dom with setAttribute('name to change', SFVecXf.toString());<br>
<br>
Finally, reset the main loop with TMan.timer[id].setalerm(function() { GLoop(id); }, 50); //reset main loop//Reset main loop<br>
and you're done.<br>
<br>
This is basically how it's written<br>
The rest is free to write tags and javascript<br>
and you can do pretty much anything.<br>
<br>
<br>
Potential bugs (places to overlook):<br>
・Division by zero, negative root, undefined<br>
・Value or absolute value over 1.0 (not normalized, outside the range of inverse trigonometric functions, etc.)<br>
・objA = new N6LType(objB); Forgot to do a deep copy by writing objA = objB; instead of new N6LType(objB);<br>
・bHomo flag related (bHomo is a homogeneous coordinate matrix N6LMatrix, and N6LVector for each row is false<br>
When trying to extract it as an axis, .SetHomo(true) must be used<br>
After that, when using the original matrix, .SetHomo(false) must be used, etc.)<br>
*Because SetHomo() was the source of bugs, it no longer changes this when it is executed, but instead returns the return value<br>
*Safer Get/Set-Col/Row() functions have been provided for row and column manipulation<br>
<br>
<br>
</b>
<hr>
<br>
<b>
<h1>How to write NAS6LIB template with ThreeJS</h1>
<br>
<br>
<br>
This is an explanation of homogeneous coordinates defined in the order w, x, y, z, .... The order is different, but the functionality is the same...<br>
<br>
<br>
How to use THREE.JS<br>
<br>
<a href="http://nas6.net/test3js.htm">THREE.JSTest.htm</a><br>
<br>
<a href="http://nas6.net/test3js.zip">THREE.JSTest.zip</a><br>
<br>
<a href="http://nas6.net/fps60.htm">60FPSTest.htm</a><br>
<br>
<a href="http://nas6.net/fps60.zip">60FPSTest.zip</a><br>
<br>
<img src="./test3js.jpg" style="border: 2px #000000 solid;"><br>
<br>
<p>・./test3js.htm</p>
<div style="background:#4080b0;">
<pre>

＜!DOCTYPE html＞
＜html lang="ja"＞
＜head＞
＜title＞THREEJSTEST＜/title＞
  ＜meta charset="UTF-8" /＞
  ＜script src="./javascripts/nas6lib/timer.js"＞＜/script＞
  ＜script src="./javascripts/threejs/three.js"＞＜/script＞

＜script＞

window.addEventListener("DOMContentLoaded", init);
var TMan = new N6LTimerMan();  //TimerManager

function init() {
  const width = 500;
  const height = 250;

  const renderer = new THREE.WebGLRenderer({
    canvas: document.querySelector("#cnv0")
  });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(width, height);
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    45,
    width / height,
    1,
    10000
  );
  camera.position.set(0, 0, 20);

  // create box
  const geometry = new THREE.BoxGeometry(5, 5, 5);
  const loader = new THREE.TextureLoader();
  const texture = loader.load('./img/koala.jpg');
  const textureF = loader.load('./img/koalaF.jpg');
  // Add texture to material
  const materials = [
    new THREE.MeshStandardMaterial({map: textureF}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture})
  ];
  // create mesh
  const box = new THREE.Mesh(geometry, materials);
  box.position.set(0, 0, 8);
  scene.add(box);

  // DirectionalLight
  const light = new THREE.DirectionalLight(0xffffff);
  light.intensity = 2; // light.intensity twice
  light.position.set(1, 1, 1);
  // add scene
  scene.add(light);

  TMan.add();
  TMan.timer[0].setalerm(function() { Loop(0); }, 50);  //set main loop


  // main loop
  function Loop(id) {

    box.rotation.x += 1.0 * Math.PI / 180.0;//Rotate 1 degree around the x axis
    box.rotation.y += 2.0 * Math.PI / 180.0;//Rotate 2 degree around the y axis
    box.rotation.z += 3.0 * Math.PI / 180.0;//Rotate 3 degree around the z axis

    // rendering
    renderer.render(scene, camera);

    TMan.timer[id].setalerm(function() { Loop(id); }, 50);  //set main loop
  }

＜!--
/*
  // First run
  Loop();

  // main loop
  function Loop() {
    requestAnimationFrame(Loop);

    box.rotation.x += 1.0 * Math.PI / 180.0;//Rotate 1 degree around the x axis
    box.rotation.y += 2.0 * Math.PI / 180.0;//Rotate 2 degree around the y axis
    box.rotation.z += 3.0 * Math.PI / 180.0;//Rotate 3 degree around the z axis

    renderer.render(scene, camera);
  }
*/
//--＞

}

＜/script＞

＜style＞
article, aside, dialog, figure, footer, header,
hgroup, menu, nav, section { display: block; }
#cnv0{
    position: absolute;
    float: left;
    top: 640px;
    left: 20px;
    background:#8080b0;
    border: 2px #000000 solid;
}
＜/style＞

＜/head＞

＜body text="black" link="#3333cc" vlink="#663399" alink="#cc0000" bgcolor="#faebf1" background="./img/kumausagineko.jpg"＞
＜font size="3"＞
＜br＞
＜br＞
＜b＞
＜h1＞THREEJSTEST＜/h1＞
＜br＞
＜div style = 'width:500px; height:250px; border: 0px; overflow:hidden;'＞
  ＜canvas id="cnv0" name="cnv0" width="500" height="250"＞＜/canvas＞
＜/div＞
＜br＞
＜br＞
＜br＞
＜/b＞
＜/font＞
＜br＞
＜br＞
＜hr＞
＜br＞
＜br＞
＜a href="./index.htm"＞back＜/a＞＜br＞
＜br＞
＜br＞
＜/body＞
＜/html＞


</pre>
</div>
<br>
<br>
<br>
<br>
<p>・How to write the header</p>
<div style="background:#4080b0;">
<pre>


＜!DOCTYPE html＞
＜html lang="ja"＞
＜head＞
＜title＞Please enter a title＜/title＞
  ＜meta charset="UTF-8" /＞

//　…………　Omitted　………
＜/head＞

</pre>
</div>
<br>
<br>
You can pretty much just copy and paste this<br><br>
<br>
<p>・Registering components</p>
<div style="background:#4080b0;">
<pre>

  ＜script src="./javascripts/nas6lib/timer.js"＞＜/script＞
  ＜script src="./javascripts/threejs/three.js"＞＜/script＞

</pre>
</div>
<br>
<br>
Please register library components such as three.js.<br>
<br>
<br>
<p>・Stylesheet</p>
<div style="background:#4080b0;">
<pre>

＜style＞
article, aside, dialog, figure, footer, header,
hgroup, menu, nav, section { display: block; }
#cnv0{
    position: absolute;
    float: left;
    top: 640px;
    left: 20px;
    background:#8080b0;
    border: 2px #000000 solid;
}
＜/style＞

</pre>
</div>
<br>
<br>
Please adjust the style sheet as necessary.<br>
<br>
<br>
<p>・Target Canvas</p>
<div style="background:#4080b0;">
<pre>

＜div style = 'width:500px; height:250px; border: 0px; overflow:hidden;'＞
  ＜canvas id="cnv0" name="cnv0" width="500" height="250"＞＜/canvas＞
＜/div＞

</pre>
</div>
<br>
<br>
The reason why the ＜canvas＞ is enclosed in a ＜div＞ is to adjust the layout.<br>
Please write it within the ＜body＞ tag.<br>
<br>
<br>
<p>・Script section</p>
<div style="background:#4080b0;">
<pre>


＜script＞

window.addEventListener("DOMContentLoaded", init);
var TMan = new N6LTimerMan();  //Timer manager

function init() {
  const width = 500;
  const height = 250;

  const renderer = new THREE.WebGLRenderer({
    canvas: document.querySelector("#cnv0")
  });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(width, height);
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    45,
    width / height,
    1,
    10000
  );
  camera.position.set(0, 0, 20);

  // create box
  const geometry = new THREE.BoxGeometry(5, 5, 5);
  const loader = new THREE.TextureLoader();
  const texture = loader.load('./img/koala.jpg');
  const textureF = loader.load('./img/koalaF.jpg');
  // Add texture to material
  const materials = [
    new THREE.MeshStandardMaterial({map: textureF}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture})
  ];
  // create mesh
  const box = new THREE.Mesh(geometry, materials);
  box.position.set(0, 0, 8);
  scene.add(box);

  // DirectionalLight
  const light = new THREE.DirectionalLight(0xffffff);
  light.intensity = 2; // Double the light intensity
  light.position.set(1, 1, 1);
  // add scene
  scene.add(light);

  TMan.add();
  TMan.timer[0].setalerm(function() { Loop(0); }, 50);  //set main loop


  //main loop 
  function Loop(id) {

    box.rotation.x += 1.0 * Math.PI / 180.0;//Rotate 1 degree around the x axis
    box.rotation.y += 2.0 * Math.PI / 180.0;//Rotate 2 degree around the y axis
    box.rotation.z += 3.0 * Math.PI / 180.0;//Rotate 3 degree around the z axis

    // rendering
    renderer.render(scene, camera);

    TMan.timer[id].setalerm(function() { Loop(id); }, 50);  //set main loop
  }

＜!--
/*
  // first run
  Loop();

  function Loop() {
    requestAnimationFrame(Loop);

    box.rotation.x += 1.0 * Math.PI / 180.0;//Rotate 1 degree around the x axis
    box.rotation.y += 2.0 * Math.PI / 180.0;//Rotate 2 degree around the y axis
    box.rotation.z += 3.0 * Math.PI / 180.0;//Rotate 3 degree around the z axis

    renderer.render(scene, camera);
  }
*/
//--＞

}

＜/script＞

</pre>
</div>
<br>
<br>
<br>
N6LVector.To3JS(b)<br>
N6LVector.From3JS(ary)<br>
N6LMatrix.To3JS()<br>
N6LMatrix.From3JS(ary)<br>
<br>
引数:ary:Array():b:4→3の時、true<br>
<br>
Added N6L←→THREE converter<br>
<br>
<br>
Basically, I think you can make almost anything with this writing style<br>
<br>
<br>
<hr>
<br>
<br>
<hr>
<br>
<br>
<a href="http://nas6.net/mttest.htm">Javascript multi-threaded testing using N6LTimerMan.htm</a><br>
<br>
<a href="http://nas6.net/mttest.zip">Javascript multi-threaded testing using N6LTimerMan.zip</a><br>
<br>
<img src="./mttest.jpg" style="border: 2px #000000 solid;"><br>
<br>
<br>
Using N6LTimerMan, you can easily implement multi-threading in JavaScript. <br>
<br>
<p>・./mttest.htm (script part)</p>
<div style="background:#4080b0;">
<pre>

window.addEventListener("DOMContentLoaded", init);
var TMan = new N6LTimerMan();  //timer manager
var pos = [ new N6LVector(4, true), new N6LVector(4, true), new N6LVector(4, true), new N6LVector(4, true)];
var th = [0, 0, 0, 0];
var dt = [50, 100, 150, 500];
var spd = 5.0;
var cnt = 0;
var div = 72;
var sph3;

function init() {
  const width = 500;
  const height = 250;

  const renderer = new THREE.WebGLRenderer({
    canvas: document.querySelector("#cnv0")
  });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(width, height);
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    45,
    width / height,
    1,
    10000
  );
  camera.position.set(0, 0, 20);

  // create sphere
  const sph0geometry = new THREE.SphereGeometry(1, 128, 128);
  // Set the color of the material
  const sph0material = new THREE.MeshBasicMaterial({ color: '#ff0000'});
  // create mesh
  const sph0 = new THREE.Mesh(sph0geometry, sph0material);
  sph0.position.set(0, 6, 0);
  pos[0] = new N6LVector([1, 0, 6, 0], true);
  // create sphere
  const sph1geometry = new THREE.SphereGeometry(1, 128, 128);
  // Set the color of the material
  const sph1material = new THREE.MeshBasicMaterial({ color: '#00ff00'});
  // create mesh
  const sph1 = new THREE.Mesh(sph1geometry, sph1material);
  sph1.position.set(0, 2, 0);
  pos[1] = new N6LVector([1, 0, 2, 0], true);
  // create sphere
  const sph2geometry = new THREE.SphereGeometry(1, 128, 128);
  // Set the color of the material
  const sph2material = new THREE.MeshBasicMaterial({ color: '#0000ff'});
  // create mesh
  const sph2 = new THREE.Mesh(sph2geometry, sph2material);
  sph2.position.set(0, -2, 0);
  pos[2] = new N6LVector([1, 0, -2, 0], true);
  // create spher
  const sph3geometry = new THREE.SphereGeometry(1, 128, 128);
  // Set the color of the material
  const sph3material = new THREE.MeshBasicMaterial({ color: '#808080'});
  // create mesh
  sph3 = new THREE.Mesh(sph3geometry, sph3material);
  sph3.position.set(0, -6, 0);
  pos[3] = new N6LVector([1, 0, -6, 0], true);
  scene.add(sph0);
  scene.add(sph1);
  scene.add(sph2);
  scene.add(sph3);

  // DirectionalLight
  const light = new THREE.DirectionalLight(0xffffff);
  light.position.set(1, 1, 1);
  // add scene
  scene.add(light);

  //add timer
  TMan.add();
  TMan.add();
  TMan.add();
  TMan.add();
  TMan.add();
  
  //first run
  Loop0(0);
  Loop1(1);
  Loop2(2);
  Loop3(3);
  RDLoop(4);


  //Implementing multiple main loops
  function RDLoop(id) {
    
    // rendering
    renderer.render(scene, camera);
    TMan.timer[id].setalerm(function() { RDLoop(id); }, 50);
  }
 
  function Loop0(id) {

    th[id] += spd * Math.PI / 180.0;
    sph0.position.set(5 * Math.sin(th[id]) + pos[id].x[1], 6, 0);

    TMan.timer[id].setalerm(function() { Loop0(id); }, dt[id]);
  }
 
  function Loop1(id) {

    th[id] += spd * Math.PI / 180.0;
    sph1.position.set(5 * Math.sin(th[id]) + pos[id].x[1], 2, 0);

    TMan.timer[id].setalerm(function() { Loop1(id); }, dt[id]);
  }
 
  function Loop2(id) {

    th[id] += spd * Math.PI / 180.0;
    sph2.position.set(5 * Math.sin(th[id]) + pos[id].x[1], -2, 0);

    TMan.timer[id].setalerm(function() { Loop2(id); }, dt[id]);
  }

  function Loop3(id) {

    th[id] += spd * Math.PI / 180.0;

    var col1 = new N6LHsv(0, [255, 255, 0, 0]);
    var col2 = new N6LHsv(0, [255, 255, 0, 0]);
    var col = col1.HsvGrd(div, cnt, col2.ahsv, 1);
    var str = col.Str();
    cnt++;

    sph3.material.color.set(str);
    sph3.position.set(5 * Math.sin(th[id]) + pos[id].x[1], -6, 0);

    var c = (Math.cos(th[id]) + 1.0) / 2.0;
    dt[id] = 50  + c * 450; //Variable timer from 50 to 500 [ms]

    TMan.timer[id].setalerm(function() { Loop3(id); }, dt[id]);
  }

}

</pre>
</div><br>
<br>
<div style="background:#4080b0;">
<pre>

var TMan = new N6LTimerMan();  //timer manager
var pos = [ new N6LVector(4, true), new N6LVector(4, true), new N6LVector(4, true)];
var th = [0, 0, 0];
var dt = [50, 100, 150, 500];
var spd = 5.0;

</pre>
</div><br>
<br>
The timer manager and the ball's position (pos), angle (th), speed (spd), and multithread interval (dt) are declared.<br>
<br>
<div style="background:#4080b0;">
<pre>

var cnt = 0;
var div = 72;
var sph3;

</pre>
</div><br>
<br>
Used to change the color of the sphere.<br>
<br>
Create a 3D scene in init().<br>	
<br>
<div style="background:#4080b0;">
<pre>

//add timer
TMan.add();
TMan.add();
TMan.add();
TMan.add();
TMan.add();

</pre>
</div><br>
<br>
Create five timers.<br>
<br>
<div style="background:#4080b0;">
<pre>

//first run
Loop0(0);
Loop1(1);
Loop2(2);
Loop3(3);
RDLoop(4);

</pre>
</div><br>
<br>
Each will be executed for the first time.<br>
<br>
<div style="background:#4080b0;">
<pre>

function RDLoop(id) {
    
  // rendering
  renderer.render(scene, camera);
  TMan.timer[id].setalerm(function() { RDLoop(id); }, 50);
}

</pre>
</div><br>
<br>
This is the rendering thread.<br>
<br>
Loop0(), Loop1(), Loop2(), and Loop3() are the threads for each ball's movement.<br>
<br>
Let's look at Loop0().<br>
<br>
<div style="background:#4080b0;">
<pre>

function Loop0(id) {

  th[id] += spd * Math.PI / 180.0;
  sph0.position.set(5 * Math.sin(th[id]) + pos[id].x[1], 6, 0);

  TMan.timer[id].setalerm(function() { Loop0(id); }, dt[id]);
}

</pre>
</div><br>
<br>
th[id] += spd * Math.PI / 180.0;<br>
<br>
Here, th[id] is added by the angle spd degrees.<br>
<br>
sph0.position.set(5 * Math.sin(th[id]) + pos[id].x[1], 6, 0);<br>
<br>
Here we apply the position calculated from the angle to the sphere<br>
<br>
TMan.timer[id].setalerm(function() { Loop0(id); }, dt[id]);<br>
<br>
Here, Loop0(id) is recursively called at intervals of dt[id].<br>
<br>
var dt = [50, 100, 150, 500];<br>
This was declared like this, so <br>
Loop0 will be called every 50ms, Loop1 every 100ms, and Loop2 every 150ms.<br>
<br>
<div style="background:#4080b0;">
<pre>

  function Loop3(id) {

    th[id] += spd * Math.PI / 180.0;

    var col1 = new N6LHsv(0, [255, 255, 0, 0]);
    var col2 = new N6LHsv(0, [255, 255, 0, 0]);
    var col = col1.HsvGrd(div, cnt, col2.ahsv, 1);
    var str = col.Str();
    cnt++;

    sph3.material.color.set(str);
    sph3.position.set(5 * Math.sin(th[id]) + pos[id].x[1], -6, 0);

    var c = (Math.cos(th[id]) + 1.0) / 2.0;
    dt[id] = 50  + c * 450; //50～500[ms]の可変タイマー

    TMan.timer[id].setalerm(function() { Loop3(id); }, dt[id]);
  }

</pre>
</div><br>
<br>
Loop3 creates an HSV gradient divided into div(72) around RGB from col1(ARGB:FFFF0000,AHSV:100,0,100,100) to col2(ARGB:FFFF0000,AHSV:100,0,100,100). Color is applied with sph3.material.color.set(str);. var c = (Math.cos(th[id]) + 1.0) / 2.0; dt[id] = 50 + c * 450; //50 to 500[ms] variable timer<br>
The code is added, so it is a variable timer of 50 to 500[ms]<br>
<br>
And so, multithreading can be achieved very easily using N6LTimerMan<br>
<br>
Note that only one software timer is executed on the N6LTimerMan core<br>
The timers managed by N6LTimerMan are distributed among the cores<br>
so that resources are not strained as much as possible<br>
Therefore, calling N6LTimer.add() many times does not have much effect. There is no problem.<br>
Well, of course, timers with short intervals will put a load on the system.<br>
<br>
The core operation of N6LTimerMan is to repeatedly run the core timer check thread<br>
with one of the fastest software timers in N6LTimerMan.<br>
measure the time, and when the time set by setalerm() for each timer has elapsed,<br>
call the registered function for each timer.<br>
That's all it does.<br>
<br>
N6LTimerMan.changeinterval(INT); //Change timer check interval<br>
You can set the core timer check interval with<br>	
<br>
<br>
<hr>
<br>
<br>
<h1>Skybox settings and basic FPS controls</h1>
<br>
<br>
<a href="http://nas6.net/test3jsbasic.htm">THREE.JSBasic.htm</a><br>
<br>
<a href="http://nas6.net/test3jsbasic.zip">THREE.JSBasic.zip</a><br>
<br>
<img src="./threejsFPS.gif" style="border: 2px #000000 solid;"><br>
<br>
Basic FPS<br>
<br>
<div style="background:#4080b0;">
<pre>


window.addEventListener("DOMContentLoaded", init);
var TMan = new N6LTimerMan();  //timer manager
var boxies = [];
var renderer;
var camera;
var scene;

function init() {
  const width = 500;
  const height = 250;

  renderer = new THREE.WebGLRenderer({
    canvas: document.querySelector("#cnv0")
  });
  renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize(width, height);
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(
    45,
    width / height,
    1,
    10000
  );
  camera.position.set(0, 0, 20);

  // create box
  const geometry = new THREE.BoxGeometry(5, 5, 5);
  const loader = new THREE.TextureLoader();
  const texture = loader.load('./img/koala.jpg');
  const textureF = loader.load('./img/koalaF.jpg');
  // Set the texture on the material
  const materials = [
    new THREE.MeshStandardMaterial({map: textureF}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture}),
    new THREE.MeshStandardMaterial({map: texture})
  ];
  for(i = 0; i ＜ 9; i++) {
    var box = new THREE.Mesh( geometry, materials );
    box.position.set(((i % 3) - 1) * 500, 0, Math.floor(i / 3) * 500);
    scene.add( box );
    boxies.push( box );
  }

  path = "./img/skybox";
  format = '.jpg';
  urls = [
    path + 'px' + format, path + 'nx' + format,
    path + 'py' + format, path + 'ny' + format,
    path + 'pz' + format, path + 'nz' + format
  ];

  tCube = new THREE.CubeTextureLoader().load( urls );
  scene.background = tCube;


  // DirectionalLight
  const light = new THREE.DirectionalLight(0xffffff);
  light.intensity = 2; //Double the light intensity
  light.position.set(1, 1, 1);
  // add scene
  scene.add(light);

  TMan.add();
  TMan.timer[0].setalerm(function() { Loop(0); }, 50);  //set main loop


  //main loop
  function Loop(id) {
    var i;
    for(i = 0; i ＜ 9; i++) {
        boxies[i].rotation.x += 1.0 * Math.PI / 180.0;//Rotate 1 degree around the x axis
        boxies[i].rotation.y += 2.0 * Math.PI / 180.0;//Rotate 2 degree around the y axis
        boxies[i].rotation.z += 3.0 * Math.PI / 180.0;//Rotate 3 degree around the z axis
    }

    moveobj();

    // rendering
    renderer.render(scene, camera);

    TMan.timer[id].setalerm(function() { Loop(id); }, 50);  //set main loop
  }

}

//Object position information
//Position 4*4 matrix (continuous parameter)
var A = false;

//Speed ​​(continuation parameter)
var V = 0.1;
var a = 0;
var pyr = new N6LVector([1, 0, 0, 0], true); 
var la = new N6LVector(4, true).UnitVec(3); 
var up = new N6LVector(4, true).UnitVec(2); 

//After initializing as above, keep calling the function below

//Acceleration a, (scalar quantity) (new parameter)
//Pitch yaw roll (1, θp, θy, θr) (new parameter)
function moveobj() {

  if(!A) {
    var Proj = camera.projectionMatrix;
    A = new N6LVector([Proj.elements[15], Proj.elements[12], Proj.elements[13], Proj.elements[14]], true); 
  }

  var B = la.Mul(a);          //Camera translation row
  var az = new N6LVector(la); //Camera Z-axis row
  var ay = new N6LVector(up); //Camera Y-axis row
  var ax = az.Cross(ay);      //Camera X-axis row
  //Camera world matrix
  var matWK = new N6LMatrix([B,ax,ay,az]);
  matWK = matWK.NormalMat();

  //Yaw pitch roll rotation
  matWK = matWK.RotAxis(az, pyr.x[3] * -1.0);
  matWK = matWK.RotAxis(ay, pyr.x[2] * -1.0);
  matWK = matWK.RotAxis(ax, pyr.x[1] * -1.0);


  //update
  B = new N6LVector(matWK.x[0]);
  B = B.SetHomo(true);
  la = new N6LVector(matWK.x[3]);
  la = la.SetHomo(true);
  up = new N6LVector(matWK.x[2]);
  up = up.SetHomo(true);
  //C = camera position + camera Z axis + updated camera Z axis
  A = A.Add(B);
  var C = A.Add(la);
  //reset
  pyr = new N6LVector([1, 0, 0, 0], true); 

  //set up
  camera.position.set(A.x[1], A.x[2], A.x[3]);
  camera.up.set(up.x[1], up.x[2], up.x[3]);
  camera.lookAt(C.x[1], C.x[2], C.x[3]);
}


/*
function moveobj() {

  if(!A) {
    var Proj = camera.projectionMatrix;
    A = new N6LVector([Proj.elements[15], Proj.elements[12], Proj.elements[13], Proj.elements[14]], true); 
  }

  var B = la.Mul(a);          //Camera translation row
  var az = new N6LVector(la); //Camera Z-axis row
  var ay = new N6LVector(up); //Camera Y-axis row
  var ax = az.Cross(ay);      //Camera X-axis row

  B = B.RotAxis(az, pyr.x[3]);
  B = B.RotAxis(ay, pyr.x[2]);
  B = B.RotAxis(ax, pyr.x[1]);

  la = la.RotAxis(az, pyr.x[3]);
  la = la.RotAxis(ay, pyr.x[2]);
  la = la.RotAxis(ax, pyr.x[1]);

  up = up.RotAxis(az, pyr.x[3]);
  up = up.RotAxis(ay, pyr.x[2]);
  up = up.RotAxis(ax, pyr.x[1]);

  A = A.Add(B);

  var C = A.Add(la);


  pyr = new N6LVector([1, 0, 0, 0], true); 

  camera.position.set(A.x[1], A.x[2], A.x[3]);
  camera.up.set(up.x[1], up.x[2], up.x[3]);        // set up
  camera.lookAt(C.x[1], C.x[2], C.x[3]);

}
*/



//input keyboard
var KBLock7 = 0;
var KBLock9 = 0;
var KBIntvl = 5;
function chkKeyBoard(){
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N1'))]) {//N1Key
    pyr.x[3] -= 1 * (Math.PI / 180);
  }
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N2'))]) {//N2Key
    pyr.x[1] += 1 * (Math.PI / 180);
  }
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N3'))]) {//N3Key
    pyr.x[3] += 1 * (Math.PI / 180);
  }
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N4'))]) {//N4Key
    pyr.x[2] += 1 * (Math.PI / 180);
  }
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N5'))]) {//N5Key
    a = 0;
  }
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N6'))]) {//N6Key
    pyr.x[2] -= 1 * (Math.PI / 180);
  }
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N7'))]) {//N7Key
    if(KBIntvl ＜ KBLock7) KBLock7 = 0;
    if(KBLock7 == 0) {
      a -= 0.5;
      if(a ＜ -50) a = -50;
    }
    KBLock7++;
  }
  else KBLock7 = 0;
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N8'))]) {//N8Key
    pyr.x[1] -= 1 * (Math.PI / 180);
  }
  if(KeyB.keystate[KeyB.indexof(KeyB.ToReal('VK_N9'))]) {//N9Key
    if(KBIntvl ＜ KBLock9) KBLock9 = 0;
    if(KBLock9 == 0) {
      a += 0.5;
      if(50 ＜ a) a = 50;
    }
    KBLock9++;
  }
  else KBLock9 = 0;
};


</pre>
</div><br>
<br>
Set up the skybox like this<br>
The important thing is to set the file name clearly like<br>
○○px,○○nx,○○py,○○ny,○○pz,○○nz,<br>
<br>
<br>
path = "./img/skybox";<br>
format = '.jpg';<br>
urls = [<br>
　path + 'px' + format, path + 'nx' + format,<br>
　path + 'py' + format, path + 'ny' + format,<br>
　path + 'pz' + format, path + 'nz' + format<br>
];<br>
<br>
tCube = new THREE.CubeTextureLoader().load( urls );<br>
scene.background = tCube;<br>
<br>
In the FPS part, <br>
<br>
function moveobj(), <br>
<br>
Camera position vector A, <br>
LookAt vector la, <br>
up vector up, <br>
are stored globally, <br>
var az = new N6LVector(la); <br>
var ay = new N6LVector(up); <br>
var ax = az.Cross(ay); <br>
Find the local (camera) axis, <br>
and rotate roll, yaw, and pitch on that axis, <br>
You can calculate all at once with Matrix or individually with Vector, <br>
Updated camera position upLookAt vector, <br>
camera.position.set(A.x[1], A.x[2], A.x[3]); <br>
camera.up.set(up.x[1], up.x[2], up.x[3]); <br>
camera.lookAt(C.x[1], C.x[2], C.x[3]);<br>
You can do this by setting<br>
<br>
<br>
</b>
<hr>
<br>
<b>
################# Operation verification #################<br>
<br>
<a href="http://nas6.net/rottest.htm">3D rotation test rottest.htm</a><br>
<br>
<a href="http://nas6.net/rottest.zip">3D rotation test rottest.zip</a><br>
<br>
<a href="http://nas6.net/postest.htm">3D rotation test, orientation vector postest.htm</a><br>
<br>
<a href="http://nas6.net/postest.zip">3D rotation test, orientation vector postest.zip</a><br>
<br>
These samples are multifaceted numerical verifications of NAS6LIB's numerical calculations,<br>
especially the rotation transformations of N6LVector, N6LMatrix, and N6LQuaternion.<br>
<br>
############################################<br>
<br>
<br>
Known issues ##############################<br>
<br>
Overview<br>
<br>
When converting 3D models between NAS6LIB and X3DOM, problems with left-right inversion of texture images and transposition of view matrices occurred, especially in skyboxes. View matrix transposition problem Even after solving the transposition problem, the numerical calculations were performed correctly inside NAS6LIB, but when drawn in X3DOM, it appeared as a mirror image. Since it worked without problems in Three.js, it was found that the cause was the unique interpretation of the coordinate system in X3DOM, and it was solved by adjusting the texture and positioning of the skybox.<br>
<br>
Problem<br>
<br>
Left-right inversion and transposition phenomenon: When a matrix calculated in NAS6LIB was applied to X3DOM, the texture image, especially of the skybox, was displayed with left-right inversion. The phenomenon of transposition of the view matrix was also confirmed.<br>
Coordinate system differences between libraries: NAS6LIB is a left-handed coordinate system, but X3DOM is based on a right-handed system, so the conversion was complicated.<br>
Comparison with Three.js: Since no problems occurred with the same conversion logic in Three.js, it was found that this was a special problem caused by the interpretation of the coordinate system in X3DOM.<br>
<br>
Solution<br>
<br>
Adjusting N6LMatrix.FromX3DOM(): The transposition problem was solved by applying a transposition to the return value.<br>
Flip the skybox image left and right and adjust placement: Since matrix transformation did not entirely solve the problem, the image used for the skybox was flipped left and right (mirrored) using an image editing software.<br>
At the same time, the placement of the images for the **front and back faces** (corresponding to the Z-axis direction) in X3DOM's Background node was also adjusted. This combination finally achieved the correct display.<br>
<br>
Learned<br>
<br>
Library-specific coordinate system interpretation: Since each 3D library has its own coordinate system definition and rendering pipeline, when linking different libraries,<br>
it is important to understand the characteristics of each library and adjust the placement of textures and objects as necessary to avoid visual differences, not just numerical accuracy.<br>
<br>
Debugging strategy: When problems are complicated and intertwined, it is effective to first check the simplest "no rotation" state, and then verify the behavior with a simple test case such as a single-axis rotation.<br>
<br>
Consider practical solutions: When mathematical transformations are complicated and difficult to solve, approaches that solve visual problems more directly, such as adjusting textures, can also be effective.<br>
<br>
##############################<br>
<br>
</b>
<hr>
<br>
<b>
<br>
<br>
　■■■　./nas6lib/keyboard.js　memo　■■■　<br>
<br>
keyID、keycode fig.<br>
<br>
<font size="2">
realID、U.S. standard keyboard<br>
<table border="1" bgcolor="#81c2d8">
<tbody>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0xYX</p></td><td><p>0</p></td><td><p>1</p></td><td><p>2</p></td><td><p>3</p></td><td><p>4</p></td><td><p>5</p></td><td><p>6</p></td><td><p>7</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>8</p></td><td><p>9</p></td><td><p>A</p></td><td><p>B</p></td><td><p>C</p></td><td><p>D</p></td><td><p>E</p></td><td><p>F</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0x0X</p></td><td><p>VK_$00</p></td><td><p>VK_LBUTTON</p></td><td><p>VK_RBUTTON</p></td><td><p>VK_CANCEL : Break</p></td><td><p>VK_MBUTTON</p></td><td><p>VK_XBUTTON1</p></td><td><p>VK_XBUTTON2</p></td><td><p>VK_$07</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_BACK : BackSpace</p></td><td><p>VK_TAB : Tab</p></td><td><p>VK_$0A</p></td><td><p>VK_$0B</p></td><td><p>VK_CLEAR</p></td><td><p>VK_RETURN : Enter</p></td><td><p>VK_$0E</p></td><td><p>VK_$0F</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0x1X</p></td><td><p>VK_SHIFT : Shift</p></td><td><p>VK_CONTROL : Ctrl</p></td><td><p>VK_MENU : Alt</p></td><td><p>VK_PAUSE</p></td><td><p>VK_CAPITAL</p></td><td><p>VK_KANA</p></td><td><p>VK_$16</p></td><td><p>VK_JUNJA</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_FINAL</p></td><td><p>VK_KANJI</p></td><td><p>VK_$1A</p></td><td><p>VK_ESCAPE : Esc</p></td><td><p>VK_CONVERT : 変換</p></td><td><p>VK_NONCONVERT : 無変換</p></td><td><p>VK_ACCEPT</p></td><td><p>VK_MODCHANGE</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0x2X</p></td><td><p>VK_SPACE : Space</p></td><td><p>VK_PRIOR : PgUp</p></td><td><p>VK_NEXT : PgDn</p></td><td><p>VK_END : End</p></td><td><p>VK_HOME : Home</p></td><td><p>VK_LEFT : ←</p></td><td><p>VK_UP : ↑</p></td><td><p>VK_RIGHT : →</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_DOWN : ↓</p></td><td><p>VK_SELECT</p></td><td><p>VK_PRINT</p></td><td><p>VK_EXECUTE</p></td><td><p>VK_SNAPSHOT : Print Screen</p></td><td><p>VK_INSERT : Ins</p></td><td><p>VK_DELETE : Del</p></td><td><p>VK_HELP</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0x3X</p></td><td><p>VK_0</p></td><td><p>VK_1</p></td><td><p>VK_2</p></td><td><p>VK_3</p></td><td><p>VK_4</p></td><td><p>VK_5</p></td><td><p>VK_6</p></td><td><p>VK_7</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_8</p></td><td><p>VK_9</p></td><td><p>VK_$3A</p></td><td><p>VK_$3B</p></td><td><p>VK_$3C</p></td><td><p>VK_$3D</p></td><td><p>VK_$3E</p></td><td><p>VK_$3F</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0x4X</p></td><td><p>VK_$40</p></td><td><p>VK_A</p></td><td><p>VK_B</p></td><td><p>VK_C</p></td><td><p>VK_D</p></td><td><p>VK_E</p></td><td><p>VK_F</p></td><td><p>VK_G</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_H</p></td><td><p>VK_I</p></td><td><p>VK_J</p></td><td><p>VK_K</p></td><td><p>VK_L</p></td><td><p>VK_M</p></td><td><p>VK_N</p></td><td><p>VK_O</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0x5X</p></td><td><p>VK_P</p></td><td><p>VK_Q</p></td><td><p>VK_R</p></td><td><p>VK_S</p></td><td><p>VK_T</p></td><td><p>VK_U</p></td><td><p>VK_V</p></td><td><p>VK_W</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_X</p></td><td><p>VK_Y</p></td><td><p>VK_Z</p></td><td><p>VK_LWIN</p></td><td><p>VK_RWIN</p></td><td><p>VK_APPS</p></td><td><p>VK_$5E</p></td><td><p>VK_SLEEP</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0x6X</p></td><td><p>VK_NUMPAD0</p></td><td><p>VK_NUMPAD1</p></td><td><p>VK_NUMPAD2</p></td><td><p>VK_NUMPAD3</p></td><td><p>VK_NUMPAD4</p></td><td><p>VK_NUMPAD5</p></td><td><p>VK_NUMPAD6</p></td><td><p>VK_NUMPAD7</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_NUMPAD8</p></td><td><p>VK_NUMPAD9</p></td><td><p>VK_MULTIPLY : numpad *</p></td><td><p>VK_ADD : numpad +</p></td><td><p>VK_SEPARATOR : numpad enter</p></td><td><p>VK_SUBTRACT : numpad -</p></td><td><p>VK_DECIMAL : numpad .</p></td><td><p>VK_DIVIDE : numpad /</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0x7X</p></td><td><p>VK_F1</p></td><td><p>VK_F2</p></td><td><p>VK_F3</p></td><td><p>VK_F4</p></td><td><p>VK_F5</p></td><td><p>VK_F6</p></td><td><p>VK_F7</p></td><td><p>VK_F8</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_F9</p></td><td><p>VK_F10</p></td><td><p>VK_F11</p></td><td><p>VK_F12</p></td><td><p>VK_F13</p></td><td><p>VK_F14</p></td><td><p>VK_F15</p></td><td><p>VK_F16</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0x8X</p></td><td><p>VK_F17</p></td><td><p>VK_F18</p></td><td><p>VK_F19</p></td><td><p>VK_F20</p></td><td><p>VK_F21</p></td><td><p>VK_F22</p></td><td><p>VK_F23</p></td><td><p>VK_F24</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_$88</p></td><td><p>VK_$89</p></td><td><p>VK_$8A</p></td><td><p>VK_$8B</p></td><td><p>VK_$8C</p></td><td><p>VK_$8D</p></td><td><p>VK_$8E</p></td><td><p>VK_$8F</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0x9X</p></td><td><p>VK_NUMLOCK : Num Lock</p></td><td><p>VK_SCROLL : Scroll Lock</p></td><td><p>VK_$92</p></td><td><p>VK_$93</p></td><td><p>VK_$94</p></td><td><p>VK_$95</p></td><td><p>VK_$96</p></td><td><p>VK_$97</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_$98</p></td><td><p>VK_$99</p></td><td><p>VK_$9A</p></td><td><p>VK_$9B</p></td><td><p>VK_$9C</p></td><td><p>VK_$9D</p></td><td><p>VK_$9E</p></td><td><p>VK_$9F</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0xAX</p></td><td><p>VK_LSHIFT</p></td><td><p>VK_RSHIFT</p></td><td><p>VK_LCONTROL</p></td><td><p>VK_RCONTROL</p></td><td><p>VK_LMENU</p></td><td><p>VK_RMENU</p></td><td><p>VK_BROWSER_BACK</p></td><td><p>VK_BROWSER_FORWARD</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_BROWSER_REFRESH</p></td><td><p>VK_BROWSER_STOP</p></td><td><p>VK_BROWSER_SERCH</p></td><td><p>VK_BROWSER_FAVORITES</p></td><td><p>VK_BROWSER_HOME</p></td><td><p>VK_VOLUME_MUTE</p></td><td><p>VK_VOLUME_DOWN</p></td><td><p>VK_VOLUME_UP</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0xBX</p></td><td><p>VK_MEDIA_NEXT_TRACK</p></td><td><p>VK_MEDIA_PREV_TRACK</p></td><td><p>VK_MEDIA_STOP</p></td><td><p>VK_MEDIA_PLAY_PAUSE</p></td><td><p>VK_LAUNCH_MAIL</p></td><td><p>VK_LAUNCH_MEDIA_SELECT</p></td><td><p>VK_LAUNCH_APP1</p></td><td><p>VK_LAUNCH_APP2</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_$B8</p></td><td><p>VK_$B9</p></td><td><p>VK_OEM_1 : [:;]</p></td><td><p>VK_OEM_PLUS : [+]</p></td><td><p>VK_OEM_COMMA : [,]</p></td><td><p>VK_OEM_MINUS : [-]</p></td><td><p>VK_OEM_PERIOD : [.]</p></td><td><p>VK_OEM_2 : [/?]</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0xCX</p></td><td><p>VK_OEM_3 : [`~]</p></td><td><p>VK_$C1</p></td><td><p>VK_$C2</p></td><td><p>VK_$C3</p></td><td><p>VK_$C4</p></td><td><p>VK_$C5</p></td><td><p>VK_$C6</p></td><td><p>VK_$C7</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_$C8</p></td><td><p>VK_$C9</p></td><td><p>VK_$CA</p></td><td><p>VK_$CB</p></td><td><p>VK_$CC</p></td><td><p>VK_$CD</p></td><td><p>VK_$CE</p></td><td><p>VK_$CF</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0xDX</p></td><td><p>VK_$D0</p></td><td><p>VK_$D1</p></td><td><p>VK_$D2</p></td><td><p>VK_$D3</p></td><td><p>VK_$D4</p></td><td><p>VK_$D5</p></td><td><p>VK_$D6</p></td><td><p>VK_$D7</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_$D8</p></td><td><p>VK_$D9</p></td><td><p>VK_$DA</p></td><td><p>VK_OEM_4 : [[{]</p></td><td><p>VK_OEM_5 : [\|]</p></td><td><p>VK_OEM_6 : []}]</p></td><td><p>VK_OEM_7 : [']</p></td><td><p>VK_OEM_8</p></td></tr>
<tr bgcolor="#a1d2e8"><td rowspan="2"><p>0xEX</p></td><td><p>VK_$E0</p></td><td><p>VK_OEM_AX</p></td><td><p>VK_OEM_102 : [\_]</p></td><td><p>VK_ICO_HELP</p></td><td><p>VK_ICO_00</p></td><td><p>VK_PROCESSKEY</p></td><td><p>VK_ICO_CLEAR</p></td><td><p>VK_PACKET</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_$E8</p></td><td><p>VK_OEM_RESET</p></td><td><p>VK_OEM_JUMP</p></td><td><p>VK_OEM_PA1</p></td><td><p>VK_OEM_PA2</p></td><td><p>VK_OEM_PA3</p></td><td><p>VK_OEM_WSCTRL</p></td><td><p>VK_OEM_CUSEL</p></td></tr>
<tr bgcolor="#81c2d8"><td rowspan="2"><p>0xFX</p></td><td><p>VK_OEM_ATTN</p></td><td><p>VK_OEM_FINISH</p></td><td><p>VK_OEM_COPY</p></td><td><p>VK_OEM_AUTO</p></td><td><p>VK_OEM_ENLW</p></td><td><p>VK_OEM_BACKTAB</p></td><td><p>VK_ATTN</p></td><td><p>VK_CRSEL</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_EXSEL</p></td><td><p>VK_EREOF</p></td><td><p>VK_PLAY</p></td><td><p>VK_ZOOM</p></td><td><p>VK_NONAME</p></td><td><p>VK_PA1</p></td><td><p>VK_OEM_CLEAR</p></td><td><p>VK_$FF</p></td></tr>
</tbody>
</table>
<br>
realID, aliasID<br>
<table border="1" bgcolor="#81c2d8">
<tbody>
<tr bgcolor="#81c2d8"><td><p>VK_RETURN, VK_ENTER</p></td><td><p>VK_ESCAPE, VK_ESC</p></td><td><p>VK_OEM_MINUS, VK_-</p></td><td><p>VK_OEM_7, VK_^</p></td><td><p>VK_NUMPAD1, VK_N1</p></td><td><p>VK_NUMPAD2, VK_N2</p></td><td><p>VK_NUMPAD3, VK_N3</p></td><td><p>VK_NUMPAD4, VK_N4</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_NUMPAD5, VK_N5</p></td><td><p>VK_NUMPAD6, VK_N6</p></td><td><p>VK_NUMPAD7, VK_N7</p></td><td><p>VK_NUMPAD8, VK_N8</p></td><td><p>VK_NUMPAD9, VK_N9</p></td><td><p>VK_NUMPAD0, VK_N0</p></td><td><p>VK_DECIMAL, VK_N.</p></td><td><p>VK_ADD, VK_N+</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_SUBTRACT, VK_N-</p></td><td><p>VK_MULTIPLY, VK_N*</p></td><td><p>VK_DIVIDE, VK_N/</p></td><td><p>VK_NUMLOCK, VK_NLK</p></td><td><p>VK_OEM_5, VK_|</p></td><td><p>VK_OEM_3, VK_@</p></td><td><p>VK_OEM_4, VK_[</p></td><td><p>VK_OEM_PLUS, VK_;</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_OEM_1, VK_:</p></td><td><p>VK_OEM_6, VK_]</p></td><td><p>VK_OEM_COMMA, VK_,</p></td><td><p>VK_OEM_PERIOD, VK_.</p></td><td><p>VK_OEM_2, VK_/</p></td><td><p>VK_OEM_102, VK__</p></td><td><p>VK_CONTROL, VK_CTRL</p></td><td><p>VK_MENU, VK_ALT</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_CONVERT, VK_CNVT</p></td><td><p>VK_NONCONVERT, VK_NONCNVT</p></td><td><p>VK_PRIOR, VK_PGUP</p></td><td><p>VK_NEXT, VK_PGDN</p></td><td><p>VK_LEFT, VK_←</p></td><td><p>VK_UP, VK_↑</p></td><td><p>VK_RIGHT, VK_→</p></td><td><p>VK_DOWN, VK_↓</p></td></tr>
<tr bgcolor="#a1d2e8"><td><p>VK_INSERT, VK_INS</p></td><td><p>VK_DELETE, VK_DEL</p></td><td><p>VK_SCROLL, VK_SLK</p></td><td><p>VK_SNAPSHOT, VK_PRTSCRN</p></td><td><p>VK_OEM_ATTN, VK_CLK</p></td><td><p>VK_OEM_COPY, VK_KANA</p></td><td><p>VK_OEM_ENLW, VK_ZEN</p></td><td><p>VK_OEM_AUTO, VK_ZEN2</p></td></tr>
<tr bgcolor="#81c2d8"><td><p>VK_PAUSE, VK_BRK</p></td><td><p>VK_CLEAR, VK_CLS</p></td><td><p>－－－</p></td><td><p>－－－</p></td><td><p>－－－</p></td><td><p>－－－</p></td><td><p>－－－</p></td><td><p>－－－</p></td></tr>
</tbody>
</table>
</font>
<br>
Interconversion of real name ID and alias ID can KeyB.ToRealID(str) and KeyB.ToAliasID(str, ary){alias list has been returned to the array ary}.<br>
You can determine depression of the keyboard in if(KeyB.keystate[KeyB.indexof(KeyB.ToRealID(str))]).<br>
Alias additional definition in KeyB.addAlias([srcIDstr, destIDstr]).<br>
Delete together also tying the alias KeyB.delAlias(str).<br>
KeyB.UnityAlias(aliasID) is unity alias name.<br>
KeyB.isPressUnityAlias(aliasID) is press info unity alias.<br>
It can handle more than one key as one of the key in the unity-related<br>
<br>
<a name="helptop">■NAS6LIB　Help Document■</a><br>
<div width="300px" style="float :left; background-image:url(./img/grntrns.png);">
<font col="white" size="3">
<br>
<br>
//########　N6LTimerMan　########<br>
//./javascripts/nas6lib/timer.js<br>
//########　timer manager　########<br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(300);">N6LTimerMan：construction</a><br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(301);">N6LTimerMan.add()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(302);">N6LTimerMan.changeinterval(int)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(303);">N6LTimerMan.start()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(304);">N6LTimerMan.stop()</a><br>
<br>
//########　N6LTimerMan.timer[id]　########<br>
//./javascripts/nas6lib/timer.js<br>
//########　timer　########<br>
//id：timer id<br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(351);">N6LTimerMan.timer[id].start()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(352);">N6LTimerMan.timer[id].stop()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(353);">N6LTimerMan.timer[id].reset()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(354);">N6LTimerMan.timer[id].copy(src)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(355);">N6LTimerMan.timer[id].now()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(356);">N6LTimerMan.timer[id].setalerm(func(id),alm)</a><br>
<br>
//########　N6LVector　########<br>
//./javascripts/nas6lib/vector.js<br>
//########　vector　########<br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(0);">N6LVector：construction</a><br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(1);">N6LVector.Equal(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(37);">N6LVector.EpsEqual(rh, eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(39);">N6LVector.Str()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(40);">N6LVector.Parse(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(41);">N6LVector.ToX3DOM(b)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(42);">N6LVector.FromX3DOM(sf)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(50);">N6LVector.To3JS(b)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(51);">N6LVector.From3JS(ary)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(2);">N6LVector.Add(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(3);">N6LVector.Sub(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(4);">N6LVector.Mul(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(5);">N6LVector.Div(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(34);">N6LVector.SetHomo(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(38);">N6LVector.Repair(eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(6);">N6LVector.Dot(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(7);">N6LVector.Cross(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(35);">N6LVector.isParallel()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(36);">N6LVector.Max()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(43);">N6LVector.DivMax()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(44);">N6LVector.LookAtMat2(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(45);">N6LVector.RotArcQuat(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(8);">N6LVector.ZeroVec()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(9);">N6LVector.UnitVec(a)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(10);">N6LVector.NormalVec(a)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(11);">N6LVector.SquareAbs()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(12);">N6LVector.Abs()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(13);">N6LVector.DirectionCosine()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(14);">N6LVector.Theta(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(15);">N6LVector.ThetaN(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(16);">N6LVector.Rot2D(theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(17);">N6LVector.RotAxis(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(18);">N6LVector.RotAxisQuat(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(33);">N6LVector.RotAxisVec(rotvec)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(19);">N6LVector.ProjectAxis(axis)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(20);">N6LVector.DistanceDotLine(p, a, b)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(21);">N6LVector.DistancePointLineLine(reta, retb, a0, a1, b0, b1)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(22);">N6LVector.PointLineLine(reta, retb, a0, a1, b0, b1)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(23);">N6LVector.DistanceLineLine(a0, a1, b0, b1)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(24);">N6LVector.Homogeneous()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(25);">N6LVector.ToHomo()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(26);">N6LVector.ToNormal()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(27);">N6LVector.Matrix()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(46);">N6LVector.PosVecGetTQ(out)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(49);">N6LVector.PosVecSetTQ(t,q)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(47);">N6LVector.PosVecMatrix()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(48);">N6LVector.PosVecMul(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(28);">N6LVector.Sphere4D()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(29);">N6LVector.FromLogAxis(base, range, x)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(30);">N6LVector.ToLogAxis(base, range, x)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(31);">N6LVector.FrustumInfVec(base, range, v)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(32);">N6LVector.InvFrustumInfVec(base, range, v, z)</a><br>
<br>
//########　N6LMatrix　########<br>
//./javascripts/nas6lib/matrix.js<br>
//########　matrix　########<br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(100);">N6LMatrix：construction</a><br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(101);">N6LMatrix.Equal(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(142);">N6LMatrix.EpsEqual(rh, eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(144);">N6LMatrix.Str()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(145);">N6LMatrix.Parse(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(146);">N6LMatrix.ToX3DOM()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(147);">N6LMatrix.FromX3DOM(sf)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(156);">N6LMatrix.To3JS()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(157);">N6LMatrix.From3JS(ary)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(151);">N6LMatrix.GetCol(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(152);">N6LMatrix.GetRow(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(153);">N6LMatrix.SetCol(rh, val)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(154);">N6LMatrix.SetRow(rh, val)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(102);">N6LMatrix.Add(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(103);">N6LMatrix.Sub(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(104);">N6LMatrix.Mul(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(105);">N6LMatrix.Div(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(139);">N6LMatrix.SetHomo(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(143);">N6LMatrix.Repair(eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(141);">N6LMatrix.Max()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(148);">N6LMatrix.DivMax()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(106);">N6LMatrix.ZeroMat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(107);">N6LMatrix.UnitMat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(124);">N6LMatrix.NormalMat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(108);">N6LMatrix.TransposedMat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(130);">N6LMatrix.TranslatedMat(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(131);">N6LMatrix.ScaleMat(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(132);">N6LMatrix.AffineMat(scale, rotate, translate)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(149);">N6LMatrix.MoveMat(outmat, outv, d, pyr, v, a, vmin, vmax)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(126);">N6LMatrix.LookAtMat(eye, lookat, up)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(150);">N6LMatrix.LookAtMat2(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(109);">N6LMatrix.InverseMat(dt, sw)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(110);">N6LMatrix.InverseMat00(dt)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(111);">N6LMatrix.InverseMat01(dt)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(112);">N6LMatrix.DeterminMatInvMat(dt)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(113);">N6LMatrix.DeterminMat(dt)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(114);">N6LMatrix.Jacobi(n, ct, eps, A, A1, A2, X1, X2)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(115);">N6LMatrix.EigenVec(ct, eps, A, det, eigen)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(116);">N6LMatrix.DiagonalMat(ct, eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(117);">N6LMatrix.Diagonal(ct, eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(140);">N6LMatrix.Rot2D(theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(118);">N6LMatrix.RotAxis(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(125);">N6LMatrix.RotAxisQuat(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(136);">N6LMatrix.RotAxisVec(rotvec)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(119);">N6LMatrix.Homogeneous()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(127);">N6LMatrix.ToHomo()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(128);">N6LMatrix.ToNormal()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(120);">N6LMatrix.Pos()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(135);">N6LMatrix.Scale()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(121);">N6LMatrix.Trace()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(122);">N6LMatrix.Quaternion()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(123);">N6LMatrix.Vector()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(155);">N6LMatrix.PosVector()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(129);">N6LMatrix.FrustumMat(left, right, top, bottom, near, far)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(138);">N6LMatrix.OrthoMat(left, right, top, bottom, near, far)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(133);">N6LMatrix.Householder()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(134);">N6LMatrix.QRMethod()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(137);">N6LMatrix.EulerAngle(first, second, third, eps)</a><br>
<br>
//########　N6LQuaternion　########<br>
//./javascripts/nas6lib/quaternion.js<br>
//########　Quaternion　########<br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(200);">N6LQuaternion：construction</a><br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(201);">N6LQuaternion.Equal(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(221);">N6LQuaternion.EpsEqual(rh, eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(224);">N6LQuaternion.Str()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(225);">N6LQuaternion.Parse(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(202);">N6LQuaternion.Add(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(203);">N6LQuaternion.Sub(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(204);">N6LQuaternion.Mul(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(205);">N6LQuaternion.Div(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(226);">N6LQuaternion.DivMax()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(222);">N6LQuaternion.Repair(eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(206);">N6LQuaternion.SquareAbs()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(207);">N6LQuaternion.Abs()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(208);">N6LQuaternion.ConjugationQuat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(209);">N6LQuaternion.InverseQuat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(218);">N6LQuaternion.ZeroQuat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(219);">N6LQuaternion.UnitQuat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(210);">N6LQuaternion.NormalQuat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(211);">N6LQuaternion.Dot(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(212);">N6LQuaternion.RotAxisQuat(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(220);">N6LQuaternion.RotAxisVec(rotvec)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(223);">N6LQuaternion.Axis(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(213);">N6LQuaternion.Matrix()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(214);">N6LQuaternion.Lerp(q, t)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(215);">N6LQuaternion.Slerp(q, t)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(216);">N6LQuaternion.Slerp2(q, t)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(217);">N6LQuaternion.Sphere4D()</a><br>
<br>
//########　N6LLnQuaternion　########<br>
//./javascripts/nas6lib/quaternion.js<br>
//########　logarithm quaternion　########<br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(250);">N6LLnQuaternion：construction</a><br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(251);">N6LLnQuaternion.Equal(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(263);">N6LLnQuaternion.EpsEqual(rh, eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(265);">N6LLnQuaternion.Str()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(266);">N6LLnQuaternion.Parse(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(252);">N6LLnQuaternion.Add(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(253);">N6LLnQuaternion.Sub(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(254);">N6LLnQuaternion.Mul(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(255);">N6LLnQuaternion.Div(rh)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(267);">N6LLnQuaternion.DivMax()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(264);">N6LLnQuaternion.Repair(eps)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(256);">N6LLnQuaternion.SquareAbs()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(257);">N6LLnQuaternion.Abs()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(262);">N6LLnQuaternion.ZeroLnQuat()</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(258);">N6LLnQuaternion.RotAxisLnQuat(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(259);">N6LLnQuaternion.Axis(axis, theta)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(260);">N6LLnQuaternion.Lerp(q, t)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(261);">N6LLnQuaternion.Lerp2(d0, q, d)</a><br>
<br>
//########　N6LKeyBoard　########<br>
//./javascripts/nas6lib/keyboard.js<br>
//########　KeyBoard　########<br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(400);">N6LKeyBoard：construction</a><br>
<br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(401);">N6LKeyBoard.setfunc(func)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(411);">N6LKeyBoard.setenable(b)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(402);">N6LKeyBoard.indexof(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(403);">N6LKeyBoard.addAlias(ary)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(404);">N6LKeyBoard.delAlias(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(407);">N6LKeyBoard.addUnityAlias(ary)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(408);">N6LKeyBoard.delUnityAlias(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(409);">N6LKeyBoard.UnityAlias(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(410);">N6LKeyBoard.isPressUnityAlias(str)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(405);">N6LKeyBoard.ToAlias(str, ret)</a><br>
<a href="https://nas6mixfoolv.github.io/NAS6LIB/index.htm#helptop" onclick="DispHelp(406);">N6LKeyBoard.ToReal(str)</a><br>
<br>
<br>
<br>
<br>
</font>
</div>
<div style="float :left; background-image:url(./img/grntrns.png);">
<p id='help'>　</p>
</div>
<br>
<br>
</b>
</font>
<p style="clear:left;">
</body>
</html>
